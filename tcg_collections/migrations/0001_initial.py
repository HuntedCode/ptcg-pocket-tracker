# Generated by Django 5.2.5 on 2025-09-22 18:32

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tcg_id', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('local_image_small', models.CharField(blank=True, default='', max_length=200)),
                ('god_pack_prob', models.FloatField(default=0.0005, help_text='Base probability of god pack (e.g., 0.0005)')),
                ('sixth_card_prob', models.FloatField(default=0.0, help_text='Base probability of 6th card (e.g., 0.05)')),
            ],
        ),
        migrations.CreateModel(
            name='DailyStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, unique=True)),
                ('packs_opened', models.PositiveIntegerField(default=0)),
                ('rare_cards_found', models.PositiveIntegerField(default=0)),
                ('new_users', models.PositiveIntegerField(default=0)),
                ('four_diamond_found', models.PositiveIntegerField(default=0)),
                ('one_star_found', models.PositiveIntegerField(default=0)),
                ('two_star_found', models.PositiveIntegerField(default=0)),
                ('three_star_found', models.PositiveIntegerField(default=0)),
                ('one_shiny_found', models.PositiveIntegerField(default=0)),
                ('two_shiny_found', models.PositiveIntegerField(default=0)),
                ('crown_found', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PackPickerData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_refresh', models.DateTimeField(default=datetime.datetime(2025, 9, 22, 17, 32, 36, 133924, tzinfo=datetime.timezone.utc), help_text='Timestamp of last sim run')),
                ('refresh_count', models.PositiveIntegerField(default=1, help_text='Count for current period (e.g., reset daily/hourly)')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PackPickerBooster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chance_new', models.FloatField(default=0.0)),
                ('expected_new', models.FloatField(default=0.0)),
                ('missing_count', models.PositiveIntegerField(default=0)),
                ('total_count', models.PositiveIntegerField(default=0)),
                ('base_missing_count', models.PositiveIntegerField(default=0)),
                ('base_total_count', models.PositiveIntegerField(default=0)),
                ('base_chance_new', models.FloatField(default=0.0)),
                ('rare_missing_count', models.PositiveIntegerField(default=0)),
                ('rare_total_count', models.PositiveIntegerField(default=0)),
                ('rare_chance_new', models.FloatField(default=0.0)),
                ('booster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tcg_collections.booster')),
                ('data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boosters', to='tcg_collections.packpickerdata')),
            ],
            options={
                'ordering': ['-chance_new'],
            },
        ),
        migrations.CreateModel(
            name='PackPickerRarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rarity', models.CharField(max_length=50)),
                ('chance_new', models.FloatField(default=0.0)),
                ('expected_new', models.FloatField(default=0.0)),
                ('missing_count', models.PositiveIntegerField(default=0)),
                ('total_count', models.PositiveIntegerField(default=0)),
                ('booster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rarities', to='tcg_collections.packpickerbooster')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('share_token', models.UUIDField(default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('pic_config', models.JSONField(default=dict)),
                ('is_trading_active', models.BooleanField(default=False, help_text='Enable to appear in matches and receive messages.')),
                ('trade_threshold', models.PositiveSmallIntegerField(choices=[(1, 'Trade down to 1'), (2, 'Keep 2 for decks')], default=2)),
                ('bio', models.TextField(blank=True, help_text="Share trading preferences (e.g., 'Only A1 sets').")),
                ('theme', models.CharField(default='default', max_length=20)),
                ('dark_mode', models.BooleanField(default=False, help_text='Enable dark mode theme')),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('is_premium', models.BooleanField(default=False, help_text='Premium subscriber status.')),
                ('accepted_trades_this_month', models.PositiveIntegerField(default=0, help_text='Count of accepted trades in current month.')),
                ('last_trade_month', models.DateField(blank=True, help_text='Last month trades were reset.', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tcg_id', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('card_count_official', models.PositiveIntegerField(blank=True, null=True)),
                ('card_count_total', models.PositiveIntegerField(blank=True, null=True)),
                ('logo_path', models.CharField(blank=True, max_length=50)),
                ('symbol', models.URLField(blank=True)),
                ('boosters', models.ManyToManyField(blank=True, related_name='sets', to='tcg_collections.booster')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
                ('tcg_id', models.CharField(max_length=50, unique=True)),
                ('illustrator', models.CharField(blank=True, max_length=100)),
                ('image_base', models.CharField(blank=True, max_length=200)),
                ('local_image_small', models.CharField(blank=True, default='', max_length=200)),
                ('name', models.CharField(max_length=100)),
                ('rarity', models.CharField(max_length=50)),
                ('manual_boosters_added', models.BooleanField(default=False, help_text='Set to True if boosters were manually assigned')),
                ('is_sixth_exclusive', models.BooleanField(default=False, help_text='True if this card is exclusive to the 6th slot in packs')),
                ('is_tradeable', models.BooleanField(default=False)),
                ('type', models.CharField(blank=True, max_length=50)),
                ('stage', models.CharField(blank=True, max_length=50)),
                ('hp', models.PositiveIntegerField(blank=True, null=True)),
                ('suffix', models.CharField(blank=True, max_length=50)),
                ('trainer_type', models.CharField(blank=True, max_length=50)),
                ('boosters', models.ManyToManyField(blank=True, related_name='cards', to='tcg_collections.booster')),
                ('card_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tcg_collections.set')),
            ],
        ),
        migrations.CreateModel(
            name='UserCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('is_seen', models.BooleanField(default=False)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tcg_collections.card')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserWant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desired_quantity', models.PositiveIntegerField(default=1)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tcg_collections.card')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('collection_add', 'Collection Add'), ('pack_open', 'Pack Open')], max_length=50)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='tcg_collect_user_id_33e476_idx')],
            },
        ),
        migrations.CreateModel(
            name='BoosterDropRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(choices=[('1-3', 'Slots 1-3 (Always One Diamond)'), ('4', 'Slot 4 (Non-One Diamond, Weighted Low)'), ('5', 'Slot 5 (Non-One Diamond, Better Odds)'), ('god', 'God Pack (All One-Star+, Rare)'), ('6', '6th Card (5% Chance, Exclusives)')], max_length=50)),
                ('rarity', models.CharField(max_length=50)),
                ('probability', models.FloatField(help_text='Probability (0.0 to 1.0)')),
                ('booster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tcg_collections.booster')),
            ],
            options={
                'unique_together': {('booster', 'slot', 'rarity')},
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('ignored', 'Ignored')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_matches', to=settings.AUTH_USER_MODEL)),
                ('offered_card', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='offered_in_matches', to='tcg_collections.card')),
                ('received_card', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_in_matches', to='tcg_collections.card')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_matches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('initiator', 'recipient')},
            },
        ),
        migrations.AddIndex(
            model_name='packpickerbooster',
            index=models.Index(fields=['data', 'chance_new'], name='tcg_collect_data_id_31418a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='packpickerbooster',
            unique_together={('data', 'booster')},
        ),
        migrations.AddIndex(
            model_name='packpickerrarity',
            index=models.Index(fields=['booster', 'rarity'], name='tcg_collect_booster_31028c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='packpickerrarity',
            unique_together={('booster', 'rarity')},
        ),
        migrations.AddIndex(
            model_name='usercollection',
            index=models.Index(fields=['user', 'quantity'], name='tcg_collect_user_id_bbdfdd_idx'),
        ),
        migrations.AddIndex(
            model_name='usercollection',
            index=models.Index(fields=['user', 'card'], name='tcg_collect_user_id_40c0d1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercollection',
            unique_together={('user', 'card')},
        ),
        migrations.AlterUniqueTogether(
            name='userwant',
            unique_together={('user', 'card')},
        ),
    ]
